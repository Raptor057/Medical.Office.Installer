$ErrorActionPreference = "Stop"

$basePath = "C:\MedicalOffice"
$envPath = Join-Path $basePath ".env.secure.gpg"
$tempEnv = "$env:Temp\env.decrypted.tmp"
$passphrase = "I0fFAwYMpEEXOJkuBARaN7cD7uIQ1Vvs5luQW64d9TBZYCRS9j"

# Validar herramientas necesarias
if (-not (Get-Command "gpg" -ErrorAction SilentlyContinue)) {
    Write-Error "‚ùå GPG no est√° instalado."
    exit 1
}
if (-not (Get-Command "docker" -ErrorAction SilentlyContinue)) {
    Write-Error "‚ùå Docker no est√° instalado o no est√° en el PATH."
    exit 1
}

Write-Host "üîê Desencriptando .env.secure.gpg..."
try {
    & gpg --batch --yes --passphrase "$passphrase" --output "$tempEnv" --decrypt "$envPath"
} catch {
    Write-Error "‚ùå Excepci√≥n al intentar desencriptar: $_"
    exit 1
}

Write-Host "üå± Exportando variables de entorno..."
Get-Content $tempEnv | ForEach-Object {
    if ($_ -match '^\s*#' -or $_ -match '^\s*$') { return }
    $parts = $_ -split '=', 2
    if ($parts.Length -eq 2) {
        [System.Environment]::SetEnvironmentVariable($parts[0], $parts[1], "Process")
        Write-Host "‚úÖ $($parts[0]) cargado"
    }
}

Set-Location $basePath

Write-Host "`nüîÑ Verificando actualizaciones de im√°genes..."
docker compose pull

Write-Host "`nüõë Deteniendo contenedores..."
docker compose down

Write-Host "`nüöÄ Levantando nueva infraestructura..."
docker compose up -d

Write-Host "`nüßπ Limpiando archivo temporal..."
Remove-Item $tempEnv -Force

Write-Host "`n‚úÖ Actualizaci√≥n completada con √©xito."


# Write-Host "üß® Deteniendo contenedores..."
# $output = docker compose down 2>&1
# if ($LASTEXITCODE -ne 0) {
#     Write-Error "‚ùå Algo sali√≥ mal:\n$output"
#     exit 1
# }
# Write-Host "‚úÖ Contenedores detenidos."
